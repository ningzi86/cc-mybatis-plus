package ${package.Controller};

import org.springframework.web.bind.annotation.*;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import org.springframework.beans.factory.annotation.Autowired;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import ${package.Service}.${table.serviceName};
import com.example.boot.utils.Result;
import com.example.boot.utils.ResultUtil;
import ${package.Entity}.${entity};
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.*;

/**
 *   description : ${entity} ${table.comment}控制器
 *   ---------------------------------
 * 	 @author ${author}
 *   @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@Api(value = "#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end", description = "${entity} ${table.comment}控制器")
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
    private final Logger logger = LoggerFactory.getLogger(${table.controllerName}.class);

    @Autowired
    public ${table.serviceName} ${table.entityPath}Service;

    /**
     * description : 添加${entity}
     * ---------------------------------
     * author : ${author}
     * @since : Create in ${date}
     */
    @PostMapping("/add${entity}" )
    @ApiOperation(value = "/add${entity}", notes = "添加${entity}" )
    public Result add${entity}(@ApiParam(name = "${entity}", value = "${entity} 实体类" ) @RequestBody ${entity} param){
        Result result;
        try{
            if(${table.entityPath}Service.insert(param)) {
                result = ResultUtil.success(param);
            }else {
                result = ResultUtil.error("添加失败");
            }
        }catch(Exception e){
            result = ResultUtil.error();
            logger.error("异常信息:{}",e.getMessage());
        }
        return result;
    }

    /**
     * description : 通过id更新${entity}
     * ---------------------------------
     * author : ${author}
     * @since : Create in ${date}
     */
    @PostMapping("/update${entity}ById")
    @ApiOperation(value = "/update${entity}ById", notes="通过id更新${entity} 注意：需要在参数中增加主键")
    public Result update${entity}ById(@ApiParam(name = "${entity}",value = "${entity} 实体类") @RequestBody ${entity} param) {
        Result result;
        try{
            if(null != param.getId()){
                result = ResultUtil.success(${table.entityPath}Service.updateById(param));
            }else {
                result = ResultUtil.error("参数错误");
            }
        }catch (Exception e) {
            result = ResultUtil.error();
            logger.error("异常信息:{}",e.getMessage());
        }
        return result;
    }

    /**
     * description : 获取分页列表
     * ---------------------------------
     * author : ${author}
     * @since : Create in ${date}
     */
    @PostMapping("/get${entity}ListToPage")
    @ApiOperation(value = "/get${entity}ListToPage", notes="获取分页列表")
    public Result get${entity}List(@ApiParam(name = "${entity}", value = "${entity} 实体类") @RequestBody ${entity} param ,
                                @ApiParam(name = "size", value = "页大小",defaultValue = "10") @RequestParam(value="size", defaultValue="10", required = false) Integer size,
                                @ApiParam(name = "current", value = "页数",defaultValue = "1") @RequestParam(value="current", defaultValue="1", required = false) Integer current) {
            Result result;
            try {
                EntityWrapper<${entity}> entityWrapper = new EntityWrapper<${entity}>(param);
                Page<${entity}> page=new Page<${entity}>(current,size);
                ${table.entityPath}Service.selectPage(page, entityWrapper);
                result = ResultUtil.success(page);
            }catch (Exception e){
                result = ResultUtil.error();
                logger.error("异常信息:{}",e.getMessage());
            }
            return result;
    }

    /**
     * description : 通过id获取${entity}
     * ---------------------------------
     * author : ${author}
     * @since : Create in ${date}
     */
    @GetMapping("/get${entity}ById")
    @ApiOperation(value = "/get${entity}ById", notes = "通过id获取${entity}")
    public Result get${entity}ById(@ApiParam(name = "id", value = "${entity}ID", required = true) @RequestParam("id") Long id) {
            Result result;
            try {
                result = ResultUtil.success(${table.entityPath}Service.selectById(id));
            }catch (Exception e) {
                result = ResultUtil.error();
                logger.error("异常信息:{}",e.getMessage());
            }
            return result;
    }

    /**
     * description : 通过id删除${entity}
     * ---------------------------------
     * author : ${author}
     * @since : Create in ${date}
     */
    @GetMapping("/delete${entity}ById")
    @ApiOperation(value = "/delete${entity}ById", notes = "通过id删除${entity}")
    public Result delete${entity}ById(@ApiParam(name = "id",value="${entity}ID", required = true) @RequestParam("id") Long id) {
            Result result;
            try{
                result = ResultUtil.success(${table.entityPath}Service.deleteById(id));
            }catch (Exception e) {
                result = ResultUtil.error();
                logger.error("异常信息:{}",e.getMessage());
            }
            return result;
    }

}
